@page "/"

@using ActivityTracker.Core.Features.ActivityTracking
@inject IActivityService ActivityService

<h1>Activity Logs</h1>

@if (_logEntries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="@_searchRequest" OnValidSubmit="UpdateEntries">
        <DataAnnotationsValidator />
        <ValidationSummary />

        Search Text : <InputText id="name" @bind-Value="_searchRequest.SearchText" />
        Start <input @bind="_searchRequest.StartDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local"/>
        End <input @bind="_searchRequest.EndDateTime" @bind:format="yyyy-MM-ddTHH:mm" type="datetime-local"/>

        <button type="submit">Submit</button>

        <button type="button" @onclick="@(async () => await DeleteSelectedLogEntries())">Delete</button>
    
        <table class="table">
            <thead>
                <tr>
                    <th></th>
                    <th>Day</th>
                    <th>Start Time</th>
                    <th>End Time</th>
                    <th>Application Title</th>
                    <th>Window Title</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in _logEntries)
                {
                    <tr>
                        <td><input type="checkbox" @onchange="eventArgs => { log.Checked = (bool)eventArgs.Value; }" checked="@log.Checked"/></td>
                        <td>@log.Entry.StartDateTime.ToLocalTime().ToShortDateString()</td>
                        <td>@log.Entry.StartDateTime.ToLocalTime().ToLongTimeString()</td>
                        <td>@(log.Entry.EndDateTime.HasValue? log.Entry.EndDateTime.Value.ToLocalTime().ToLongTimeString() : "N/A")</td>
                        <td>@log.Entry.ApplicationTitle</td>
                        <td>@log.Entry.WindowTitle.Substring(0, Math.Min(log.Entry.WindowTitle.Length, 100))</td>
                    </tr>
                }
            </tbody>
        </table>
    </EditForm>
}

@code {
    private List<LogEntryRow> _logEntries;
    private Dictionary<int, LogEntryRow> _selectedLogEntries;
    private ActivityLogSearchRequest _searchRequest;

    protected override async Task OnInitializedAsync()
    {
        _selectedLogEntries = new Dictionary<int, LogEntryRow>();

        _searchRequest = new ActivityLogSearchRequest(){
            StartDateTime = DateTime.Now.AddDays(-1).Date,
            EndDateTime = DateTime.Now.AddDays(1).Date
        };

        await UpdateEntries();
    }

    private async Task UpdateEntries()
    {
        _logEntries = (await ActivityService.SearchActivityLogEntriesAsync(_searchRequest))?.Results.Select(x => new LogEntryRow(x)).ToList();
    }

    private async Task DeleteSelectedLogEntries(){
        var idsToDelete = _logEntries.Where(x => x.Checked).Select(x => x.Entry.Id.Value).Distinct().ToList();

        await ActivityService.DeleteActivityLogEntriesAsync(idsToDelete);
        _logEntries = _logEntries.Where(x => !x.Checked).ToList();
    }

    private class LogEntryRow{
        public ActivityLogEntry Entry {get; private set;}
        public bool Checked {get; set;}

        public LogEntryRow(ActivityLogEntry entry){
            Entry = entry;
            Checked = false;
        }
    }
}
